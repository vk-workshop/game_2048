{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["/* eslint-disable max-len */ \"use strict\";\nvar messageLose = document.querySelector(\"p.message-lose\");\nvar messageWin = document.querySelector(\"p.message-win\");\nvar messageStart = document.querySelector(\"p.message-start\");\nvar buttonStart = document.querySelector(\".start\");\nvar gameScore = document.querySelector(\".game-score\");\nvar gameField = document.querySelector(\".game-field\");\nvar fieldRows = gameField.querySelectorAll(\".field-row\");\nvar fieldCells = gameField.querySelectorAll(\".field-cell\");\nvar score = 0;\nvar random = function(max) {\n    var num = Math.floor(Math.random() * max);\n    return num;\n};\nvar findEmptyCells = function() {\n    return Array.from(fieldCells).filter(function(cell) {\n        return !cell.textContent;\n    });\n};\nvar addCellNumber = function() {\n    var index = random(16);\n    var newNumber = random(10) < 9 ? \"2\" : \"4\";\n    if (findEmptyCells().length === 0 || !buttonStart.hasAttribute(\"start\")) return;\n    if (!fieldCells[index].textContent) fieldCells[index].textContent = newNumber;\n    else addCellNumber();\n    checkWin();\n    checkLoose();\n};\nvar checkWin = function() {\n    if (Array.from(fieldCells).some(function(cell) {\n        return cell.textContent === \"2048\";\n    })) messageWin.classList.remove(\"hidden\");\n};\nvar checkLoose = function() {\n    if (findEmptyCells().length > 0) return;\n    for(var i = 0; i < fieldRows.length; i++){\n        var rowCells = Array.from(fieldRows[i].children);\n        for(var k = 0; k < rowCells.length - 1; k++){\n            if (rowCells[k].textContent === rowCells[k + 1].textContent) return;\n        }\n    }\n    for(var i1 = 0; i1 < 4; i1++){\n        var colCells = [\n            fieldRows[0].children[i1],\n            fieldRows[1].children[i1],\n            fieldRows[2].children[i1],\n            fieldRows[3].children[i1]\n        ];\n        for(var k1 = 0; k1 < colCells.length - 1; k1++){\n            if (colCells[k1].textContent === colCells[k1 + 1].textContent) return;\n        }\n    }\n    messageLose.classList.remove(\"hidden\");\n};\nvar pressStart = function() {\n    fieldCells.forEach(function(cell) {\n        cell.textContent = \"\";\n    });\n    score = 0;\n    gameScore.textContent = score;\n    messageLose.classList.add(\"hidden\");\n    messageWin.classList.add(\"hidden\");\n    messageStart.classList.add(\"hidden\");\n    buttonStart.classList.add(\"restart\");\n    buttonStart.textContent = \"Restart\";\n    buttonStart.setAttribute(\"start\", \"true\");\n    addCellNumber();\n    addCellNumber();\n    addClass();\n};\nvar addClass = function() {\n    fieldCells.forEach(function(cell) {\n        cell.classList.forEach(function(className) {\n            if (className.startsWith(\"field-cell--\")) cell.classList.remove(className);\n        });\n        if (cell.textContent) cell.classList.add(\"cell-transition\");\n        else cell.classList.remove(\"cell-transition\");\n        switch(cell.textContent){\n            case \"2\":\n                cell.classList.add(\"field-cell--2\");\n                break;\n            case \"4\":\n                cell.classList.add(\"field-cell--4\");\n                break;\n            case \"8\":\n                cell.classList.add(\"field-cell--8\");\n                break;\n            case \"16\":\n                cell.classList.add(\"field-cell--16\");\n                break;\n            case \"32\":\n                cell.classList.add(\"field-cell--32\");\n                break;\n            case \"64\":\n                cell.classList.add(\"field-cell--64\");\n                break;\n            case \"128\":\n                cell.classList.add(\"field-cell--128\");\n                break;\n            case \"256\":\n                cell.classList.add(\"field-cell--256\");\n                break;\n            case \"512\":\n                cell.classList.add(\"field-cell--512\");\n                break;\n            case \"1024\":\n                cell.classList.add(\"field-cell--1024\");\n                break;\n            case \"2048\":\n                cell.classList.add(\"field-cell--2048\");\n                break;\n            default:\n                break;\n        }\n    });\n};\nvar countScore = function(value) {\n    score += value;\n    gameScore.textContent = score;\n};\nvar renderAxisX = function(values, row, method) {\n    var newValues = values.filter(function(value) {\n        return value !== 0;\n    });\n    while(newValues.length < 4)newValues[method](0);\n    for(var i = 0; i < row.children.length; i++)row.children[i].textContent = newValues[i] === 0 ? \"\" : newValues[i];\n};\nvar renderAxisY = function(values, col, method) {\n    var newValues = values.filter(function(value) {\n        return value !== 0;\n    });\n    while(newValues.length < 4)newValues[method](0);\n    for(var i = 0; i < col.length; i++)col[i].textContent = newValues[i] === 0 ? \"\" : newValues[i];\n};\nvar moveRight = function(row) {\n    var values = Array.from(row.children).map(function(cell) {\n        return +cell.textContent || 0;\n    });\n    for(var i = values.length - 1; i > 0; i--)if (values[i] === (values[i - 1] || values[i - 2] || values[i - 3]) && values[i] !== 0) {\n        countScore(values[i]);\n        values[i] *= 2;\n        values[i - 1] = 0;\n    }\n    renderAxisX(values, row, \"unshift\");\n};\nvar moveLeft = function(row) {\n    var values = Array.from(row.children).map(function(cell) {\n        return +cell.textContent || 0;\n    });\n    for(var i = 0; i < values.length - 1; i++)if (values[i] === (values[i + 1] || values[i + 2] || values[i + 3]) && values[i] !== 0) {\n        countScore(values[i]);\n        values[i] *= 2;\n        values[i + 1] = 0;\n    }\n    renderAxisX(values, row, \"push\");\n};\nvar moveUp = function() {\n    var columns = [\n        [],\n        [],\n        [],\n        []\n    ];\n    for(var i = 0; i < fieldCells.length; i++)columns[i % 4].push(fieldCells[i]);\n    columns.forEach(function(col) {\n        var values = col.map(function(cell) {\n            return +cell.textContent || 0;\n        });\n        for(var i = 0; i < values.length - 1; i++)if (values[i] === (values[i + 1] || values[i + 2] || values[i + 3]) && values[i] !== 0) {\n            countScore(values[i]);\n            values[i] *= 2;\n            values[i + 1] = 0;\n        }\n        renderAxisY(values, col, \"push\");\n    });\n};\nvar moveDown = function() {\n    var columns = [\n        [],\n        [],\n        [],\n        []\n    ];\n    for(var i = 0; i < fieldCells.length; i++)columns[i % 4].push(fieldCells[i]);\n    columns.forEach(function(col) {\n        var values = col.map(function(cell) {\n            return +cell.textContent || 0;\n        });\n        for(var i = values.length - 1; i > 0; i--)if (values[i] === (values[i - 1] || values[i - 2] || values[i - 3]) && values[i] !== 0) {\n            countScore(values[i]);\n            values[i] *= 2;\n            values[i - 1] = 0;\n        }\n        renderAxisY(values, col, \"unshift\");\n    });\n};\nvar moveFn = function(e) {\n    switch(e){\n        case \"ArrowRight\":\n            addCellNumber();\n            fieldRows.forEach(function(row) {\n                return moveRight(row);\n            });\n            addClass();\n            break;\n        case \"ArrowUp\":\n            addCellNumber();\n            moveUp();\n            addClass();\n            break;\n        case \"ArrowDown\":\n            addCellNumber();\n            moveDown();\n            addClass();\n            break;\n        case \"ArrowLeft\":\n            addCellNumber();\n            fieldRows.forEach(function(row) {\n                return moveLeft(row);\n            });\n            addClass();\n            break;\n        default:\n    }\n};\ndocument.addEventListener(\"keydown\", function(e) {\n    return moveFn(e.key);\n});\nbuttonStart.addEventListener(\"click\", pressStart);\n\n//# sourceMappingURL=index.9c192a7f.js.map\n","/* eslint-disable max-len */\n'use strict';\n\nconst messageLose = document.querySelector('p.message-lose');\nconst messageWin = document.querySelector('p.message-win');\nconst messageStart = document.querySelector('p.message-start');\nconst buttonStart = document.querySelector('.start');\nconst gameScore = document.querySelector('.game-score');\nconst gameField = document.querySelector('.game-field');\nconst fieldRows = gameField.querySelectorAll('.field-row');\nconst fieldCells = gameField.querySelectorAll('.field-cell');\nlet score = 0;\n\nconst random = (max) => {\n  const num = Math.floor(Math.random() * max);\n\n  return num;\n};\n\nconst findEmptyCells = () => {\n  return Array.from(fieldCells).filter((cell) => !cell.textContent);\n};\n\nconst addCellNumber = () => {\n  const index = random(16);\n  const newNumber = random(10) < 9 ? '2' : '4';\n\n  if (findEmptyCells().length === 0 || !buttonStart.hasAttribute('start')) {\n    return;\n  }\n\n  if (!fieldCells[index].textContent) {\n    fieldCells[index].textContent = newNumber;\n  } else {\n    addCellNumber();\n  }\n\n  checkWin();\n  checkLoose();\n};\n\nconst checkWin = () => {\n  if (Array.from(fieldCells).some((cell) => cell.textContent === '2048')) {\n    messageWin.classList.remove('hidden');\n  }\n};\n\nconst checkLoose = () => {\n  if (findEmptyCells().length > 0) {\n    return;\n  }\n\n  for (let i = 0; i < fieldRows.length; i++) {\n    const rowCells = Array.from(fieldRows[i].children);\n\n    for (let k = 0; k < rowCells.length - 1; k++) {\n      if (rowCells[k].textContent === rowCells[k + 1].textContent) {\n        return;\n      }\n    }\n  }\n\n  for (let i = 0; i < 4; i++) {\n    const colCells = [\n      fieldRows[0].children[i],\n      fieldRows[1].children[i],\n      fieldRows[2].children[i],\n      fieldRows[3].children[i],\n    ];\n\n    for (let k = 0; k < colCells.length - 1; k++) {\n      if (colCells[k].textContent === colCells[k + 1].textContent) {\n        return;\n      }\n    }\n  }\n\n  messageLose.classList.remove('hidden');\n};\n\nconst pressStart = () => {\n  fieldCells.forEach((cell) => {\n    cell.textContent = '';\n  });\n  score = 0;\n  gameScore.textContent = score;\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageStart.classList.add('hidden');\n  buttonStart.classList.add('restart');\n  buttonStart.textContent = 'Restart';\n  buttonStart.setAttribute('start', 'true');\n  addCellNumber();\n  addCellNumber();\n  addClass();\n};\n\nconst addClass = () => {\n  fieldCells.forEach((cell) => {\n    cell.classList.forEach((className) => {\n      if (className.startsWith('field-cell--')) {\n        cell.classList.remove(className);\n      }\n    });\n\n    if (cell.textContent) {\n      cell.classList.add('cell-transition');\n    } else {\n      cell.classList.remove('cell-transition');\n    }\n\n    switch (cell.textContent) {\n      case '2':\n        cell.classList.add('field-cell--2');\n        break;\n      case '4':\n        cell.classList.add('field-cell--4');\n        break;\n      case '8':\n        cell.classList.add('field-cell--8');\n        break;\n      case '16':\n        cell.classList.add('field-cell--16');\n        break;\n      case '32':\n        cell.classList.add('field-cell--32');\n        break;\n      case '64':\n        cell.classList.add('field-cell--64');\n        break;\n      case '128':\n        cell.classList.add('field-cell--128');\n        break;\n      case '256':\n        cell.classList.add('field-cell--256');\n        break;\n      case '512':\n        cell.classList.add('field-cell--512');\n        break;\n      case '1024':\n        cell.classList.add('field-cell--1024');\n        break;\n      case '2048':\n        cell.classList.add('field-cell--2048');\n        break;\n      default:\n        break;\n    }\n  });\n};\n\nconst countScore = (value) => {\n  score += value;\n  gameScore.textContent = score;\n};\n\nconst renderAxisX = (values, row, method) => {\n  const newValues = values.filter((value) => value !== 0);\n\n  while (newValues.length < 4) {\n    newValues[method](0);\n  }\n\n  for (let i = 0; i < row.children.length; i++) {\n    row.children[i].textContent = newValues[i] === 0 ? '' : newValues[i];\n  }\n};\n\nconst renderAxisY = (values, col, method) => {\n  const newValues = values.filter((value) => value !== 0);\n\n  while (newValues.length < 4) {\n    newValues[method](0);\n  }\n\n  for (let i = 0; i < col.length; i++) {\n    col[i].textContent = newValues[i] === 0 ? '' : newValues[i];\n  }\n};\n\nconst moveRight = (row) => {\n  const values = Array.from(row.children).map((cell) => +cell.textContent || 0);\n\n  for (let i = values.length - 1; i > 0; i--) {\n    if (\n      values[i] === (values[i - 1] || values[i - 2] || values[i - 3]) &&\n      values[i] !== 0\n    ) {\n      countScore(values[i]);\n      values[i] *= 2;\n      values[i - 1] = 0;\n    }\n  }\n\n  renderAxisX(values, row, 'unshift');\n};\n\nconst moveLeft = (row) => {\n  const values = Array.from(row.children).map((cell) => +cell.textContent || 0);\n\n  for (let i = 0; i < values.length - 1; i++) {\n    if (\n      values[i] === (values[i + 1] || values[i + 2] || values[i + 3]) &&\n      values[i] !== 0\n    ) {\n      countScore(values[i]);\n      values[i] *= 2;\n      values[i + 1] = 0;\n    }\n  }\n\n  renderAxisX(values, row, 'push');\n};\n\nconst moveUp = () => {\n  const columns = [[], [], [], []];\n\n  for (let i = 0; i < fieldCells.length; i++) {\n    columns[i % 4].push(fieldCells[i]);\n  }\n\n  columns.forEach((col) => {\n    const values = col.map((cell) => +cell.textContent || 0);\n\n    for (let i = 0; i < values.length - 1; i++) {\n      if (\n        values[i] === (values[i + 1] || values[i + 2] || values[i + 3]) &&\n        values[i] !== 0\n      ) {\n        countScore(values[i]);\n        values[i] *= 2;\n        values[i + 1] = 0;\n      }\n    }\n\n    renderAxisY(values, col, 'push');\n  });\n};\n\nconst moveDown = () => {\n  const columns = [[], [], [], []];\n\n  for (let i = 0; i < fieldCells.length; i++) {\n    columns[i % 4].push(fieldCells[i]);\n  }\n\n  columns.forEach((col) => {\n    const values = col.map((cell) => +cell.textContent || 0);\n\n    for (let i = values.length - 1; i > 0; i--) {\n      if (\n        values[i] === (values[i - 1] || values[i - 2] || values[i - 3]) &&\n        values[i] !== 0\n      ) {\n        countScore(values[i]);\n        values[i] *= 2;\n        values[i - 1] = 0;\n      }\n    }\n\n    renderAxisY(values, col, 'unshift');\n  });\n};\n\nconst moveFn = (e) => {\n  switch (e) {\n    case 'ArrowRight':\n      addCellNumber();\n      fieldRows.forEach((row) => moveRight(row));\n      addClass();\n      break;\n\n    case 'ArrowUp':\n      addCellNumber();\n      moveUp();\n      addClass();\n      break;\n\n    case 'ArrowDown':\n      addCellNumber();\n      moveDown();\n      addClass();\n      break;\n\n    case 'ArrowLeft':\n      addCellNumber();\n      fieldRows.forEach((row) => moveLeft(row));\n      addClass();\n      break;\n\n    default:\n  }\n};\n\ndocument.addEventListener('keydown', (e) => moveFn(e.key));\n\nbuttonStart.addEventListener('click', pressStart);\n"],"names":["messageLose","document","querySelector","messageWin","messageStart","buttonStart","gameScore","gameField","fieldRows","querySelectorAll","fieldCells","score","random","max","Math","floor","findEmptyCells","Array","from","filter","cell","textContent","addCellNumber","index","newNumber","length","hasAttribute","checkWin","checkLoose","some","classList","remove","i","rowCells","children","k","i1","colCells","k1","addClass","forEach","className","startsWith","add","countScore","value","renderAxisX","values","row","method","newValues","renderAxisY","col","moveRight","map","moveLeft","moveUp","columns","push","moveDown","moveFn","e","addEventListener","key","setAttribute"],"version":3,"file":"index.9c192a7f.js.map"}